from datetime import datetime, timedelta
from config import LEVEL_SYSTEM_CONFIG


def is_new_day(last_reset: datetime) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–∞—á–∞–ª—Å—è –ª–∏ –Ω–æ–≤—ã–π –¥–µ–Ω—å"""
    return datetime.now().date() > last_reset.date()


def time_until_reset() -> str:
    """–í—Ä–µ–º—è –¥–æ —Å–±—Ä–æ—Å–∞ –∑–∞–¥–∞—á"""
    now = datetime.now()
    tomorrow = now.replace(hour=0, minute=0, second=0, microsecond=0) + timedelta(days=1)
    time_left = tomorrow - now

    hours = int(time_left.total_seconds() // 3600)
    minutes = int((time_left.total_seconds() % 3600) // 60)

    return f"{hours}—á {minutes}–º"


def should_apply_penalty(last_reset: datetime) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å —à—Ç—Ä–∞—Ñ"""
    penalty_hours = LEVEL_SYSTEM_CONFIG["PENALTY_HOURS"]
    return datetime.now() - last_reset > timedelta(hours=penalty_hours)


def format_user_stats(user_stats, rank_info=None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    from level_system import LevelSystem, RankSystem

    if rank_info is None:
        rank_info = RankSystem.get_rank_progress(user_stats.level)

    current_rank = rank_info["current_rank"]
    next_rank = rank_info["next_rank"]

    completed_tasks = sum(1 for task in user_stats.daily_tasks if task.completed)
    total_tasks = len(user_stats.daily_tasks)

    # –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–Ω–≥–∞
    rank_progress = ""
    if next_rank:
        rank_progress = f"\nüéØ –î–æ —Ä–∞–Ω–≥–∞ {next_rank.color} **{next_rank.code}**: {rank_info['levels_to_next']} —É—Ä–æ–≤–Ω–µ–π"

    return f"""
üéÆ **–°–ò–°–¢–ï–ú–ê –£–†–û–í–ù–ï–ô SOLO LEVELING**

üë§ **–ò–≥—Ä–æ–∫**: {user_stats.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"}
üÜô **Level**: {user_stats.level}
üéñÔ∏è **–†–∞–Ω–≥**: {current_rank.color} **{current_rank.code}** - {current_rank.name}
‚≠êÔ∏è **XP**: {user_stats.xp}/{LevelSystem.get_xp_for_next_level(user_stats.level)}
üéØ **–û–±—â–∏–π XP**: {user_stats.total_xp}
{rank_progress}

üìÖ **–î–∞—Ç–∞**: {datetime.now().strftime('%d.%m.%Y')}
‚úÖ **–ó–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã**: {completed_tasks}/{total_tasks}
üìä **XP –∑–∞ –¥–µ–Ω—å**: {sum(task.xp_reward for task in user_stats.daily_tasks if task.completed)}

‚è∞ **–í—Ä–µ–º—è –¥–æ —Å–±—Ä–æ—Å–∞**: {time_until_reset()}

üèÜ **–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è**: {sum(1 for title in user_stats.titles if title.achieved)}/{len(user_stats.titles)}
"""


def format_detailed_stats(user_stats) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    from level_system import RankSystem

    rank_info = RankSystem.get_rank_progress(user_stats.level)
    current_rank = rank_info["current_rank"]

    days_active = (datetime.now() - user_stats.last_reset).days + 1
    avg_xp_per_day = user_stats.total_xp / max(days_active, 1)

    stats_text = f"""
üìà **–ü–û–î–†–û–ë–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê**

üéÆ **–ü—Ä–æ–≥—Ä–µ—Å—Å –≤ —Å–∏—Å—Ç–µ–º–µ**:
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: {user_stats.level}
‚Ä¢ –†–∞–Ω–≥: {current_rank.color} **{current_rank.code}** - {current_rank.name}
‚Ä¢ –¢–µ–∫—É—â–∏–π XP: {user_stats.xp}
‚Ä¢ –û–±—â–∏–π XP: {user_stats.total_xp}
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ XP –≤ –¥–µ–Ω—å: {avg_xp_per_day:.1f}

üìä **–ó–∞–¥–∞—á–∏ —Å–µ–≥–æ–¥–Ω—è**:
"""

    for task in user_stats.daily_tasks:
        status = "‚úÖ" if task.completed else "‚ùå"
        time_completed = task.completion_time.strftime("%H:%M") if task.completion_time else "‚Äî"
        stats_text += f"‚Ä¢ {status} {task.name} ({time_completed})\n"

    stats_text += f"""
üèÜ **–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è**:
‚Ä¢ –ü–æ–ª—É—á–µ–Ω–æ —Ç–∏—Ç—É–ª–æ–≤: {sum(1 for title in user_stats.titles if title.achieved)}
‚Ä¢ –í—Å–µ–≥–æ —Ç–∏—Ç—É–ª–æ–≤: {len(user_stats.titles)}

‚è∞ **–í—Ä–µ–º—è**:
‚Ä¢ –î–Ω–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ: {days_active}
‚Ä¢ –í—Ä–µ–º—è –¥–æ —Å–±—Ä–æ—Å–∞: {time_until_reset()}
"""

    return stats_text


def format_top_users(users_list, title="üèÜ –¢–û–ü –ò–ì–†–û–ö–û–í") -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    from level_system import RankSystem

    if not users_list:
        return "üìù –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."

    text = f"**{title}**\n\n"

    for i, user in enumerate(users_list, 1):
        rank = RankSystem.get_rank_by_level(user.level)
        emoji = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"{i}."

        text += f"{emoji} **{user.username or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}**\n"
        text += f"   {rank.color} {rank.code} ‚Ä¢ Level {user.level} ‚Ä¢ {user.total_xp} XP\n\n"

    return text


def calculate_penalty(user_stats) -> int:
    """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —à—Ç—Ä–∞—Ñ –∑–∞ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏"""
    penalty_xp = 0
    for task in user_stats.daily_tasks:
        if not task.completed:
            penalty_xp += LEVEL_SYSTEM_CONFIG["PENALTY_XP_PER_TASK"]
    return penalty_xp