from typing import List
import math
from typing import Dict, Optional
from aiogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton
)
from models import Task, Title, Rank


def get_main_keyboard() -> ReplyKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –ú–æ–π –°—Ç–∞—Ç—É—Å"), KeyboardButton(text="‚úÖ –ó–∞–¥–∞—á–∏")],
            [KeyboardButton(text="üèÜ –¢–∏—Ç—É–ª—ã"), KeyboardButton(text="üéñÔ∏è –†–∞–Ω–≥–∏")],
            [KeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton(text="üèÅ –†–µ–π—Ç–∏–Ω–≥")],
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ó–∞–¥–∞—á—É"), KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
        ],
        resize_keyboard=True
    )
    return keyboard


def get_tasks_keyboard(tasks: List[Task]) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∑–∞–¥–∞—á"""
    keyboard = []
    for i, task in enumerate(tasks):
        status = "‚úÖ" if task.completed else "‚è≥"
        keyboard.append([InlineKeyboardButton(
            text=f"{status} {task.name} (+{task.xp_reward}XP)",
            callback_data=f"task_{i}"
        )])

    keyboard.append([InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_tasks")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_titles_keyboard(titles: List[Title]) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–∏—Ç—É–ª–æ–≤"""
    keyboard = []
    for i, title in enumerate(titles):
        status = "üèÜ" if title.achieved else "üîí"
        keyboard.append([InlineKeyboardButton(
            text=f"{status} {title.name}",
            callback_data=f"title_{i}"
        )])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_ranks_keyboard(ranks: List[Rank]) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–Ω–≥–æ–≤"""
    keyboard = []
    for i, rank in enumerate(ranks):
        max_level_text = "‚àû" if rank.max_level == float('inf') else str(rank.max_level)
        keyboard.append([InlineKeyboardButton(
            text=f"{rank.color} {rank.code} - {rank.name} ({rank.min_level}-{max_level_text})",
            callback_data=f"rank_{i}"
        )])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_rating_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞"""
    keyboard = [
        [InlineKeyboardButton(text="üèÜ –¢–æ–ø –ø–æ —É—Ä–æ–≤–Ω—é", callback_data="rating_level")],
        [InlineKeyboardButton(text="‚≠ê –¢–æ–ø –ø–æ XP", callback_data="rating_xp")],
        [InlineKeyboardButton(text="üéñÔ∏è –ü–æ —Ä–∞–Ω–≥–∞–º", callback_data="rating_ranks")],
        [InlineKeyboardButton(text="üìä –ú–æ—è –ø–æ–∑–∏—Ü–∏—è", callback_data="rating_position")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_rank_users_keyboard(rank_code: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ä–∞–Ω–≥–∞"""
    keyboard = [
        [InlineKeyboardButton(text="üë• –ü–æ–∫–∞–∑–∞—Ç—å –∏–≥—Ä–æ–∫–æ–≤", callback_data=f"rank_users_{rank_code}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Ä–∞–Ω–≥–∞–º", callback_data="back_to_ranks")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)