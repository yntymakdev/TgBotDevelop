from config import LEVEL_SYSTEM_CONFIG, RANK_SYSTEM_CONFIG
from models import Rank
from typing import Dict, Optional, List

class LevelSystem:
    """–°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π –∫–∞–∫ –≤ Solo Leveling"""

    XP_REQUIREMENTS = LEVEL_SYSTEM_CONFIG["XP_REQUIREMENTS"]

    @staticmethod
    def get_xp_for_next_level(current_level: int) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å XP –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è"""
        if current_level < 5:
            return LevelSystem.XP_REQUIREMENTS.get(current_level + 1, 100)
        elif current_level < 10:
            return 500
        elif current_level < 25:
            return 1000
        elif current_level < 50:
            return 2500
        else:
            return 5000

    @staticmethod
    def calculate_level(total_xp: int) -> int:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –ø–æ –æ–±—â–µ–º—É XP"""
        level = 1
        xp_needed = 0

        for lvl in sorted(LevelSystem.XP_REQUIREMENTS.keys()):
            xp_needed += LevelSystem.XP_REQUIREMENTS[lvl]
            if total_xp >= xp_needed:
                level = lvl
            else:
                break

        # –î–ª—è —É—Ä–æ–≤–Ω–µ–π –≤—ã—à–µ 100
        if total_xp >= xp_needed:
            additional_levels = (total_xp - xp_needed) // 5000
            level = 100 + additional_levels

        return level


class RankSystem:
    """–°–∏—Å—Ç–µ–º–∞ —Ä–∞–Ω–≥–æ–≤ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–≥—Ä–æ–∫–æ–≤"""

    RANKS = RANK_SYSTEM_CONFIG["RANKS"]

    @staticmethod
    def get_rank_by_level(level: int) -> Rank:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞–Ω–≥ –ø–æ —É—Ä–æ–≤–Ω—é"""
        for rank_code, rank_data in RankSystem.RANKS.items():
            if rank_data["min_level"] <= level <= rank_data["max_level"]:
                return Rank(
                    code=rank_code,
                    name=rank_data["name"],
                    color=rank_data["color"],
                    min_level=rank_data["min_level"],
                    max_level=rank_data["max_level"]
                )

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º E —Ä–∞–Ω–≥
        return Rank(
            code="E",
            name="–ù–æ–≤–∏—á–æ–∫",
            color="üü´",
            min_level=1,
            max_level=10
        )

    @staticmethod
    def get_rank_progress(level: int) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–Ω–≥–∞"""
        current_rank = RankSystem.get_rank_by_level(level)

        # –ù–∞–π—Ç–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–Ω–≥
        next_rank = None
        rank_codes = list(RankSystem.RANKS.keys())

        try:
            current_index = rank_codes.index(current_rank.code)
            if current_index < len(rank_codes) - 1:
                next_rank_code = rank_codes[current_index + 1]
                next_rank_data = RankSystem.RANKS[next_rank_code]
                next_rank = Rank(
                    code=next_rank_code,
                    name=next_rank_data["name"],
                    color=next_rank_data["color"],
                    min_level=next_rank_data["min_level"],
                    max_level=next_rank_data["max_level"]
                )
        except (ValueError, IndexError):
            pass

        if next_rank:
            levels_to_next = next_rank.min_level - level
            progress_percentage = ((level - current_rank.min_level) /
                                   (current_rank.max_level - current_rank.min_level)) * 100
        else:
            levels_to_next = 0
            progress_percentage = 100

        return {
            "current_rank": current_rank,
            "next_rank": next_rank,
            "levels_to_next": levels_to_next,
            "progress_percentage": min(progress_percentage, 100)
        }

    @staticmethod
    def get_all_ranks() -> List[Rank]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ä–∞–Ω–≥–∏"""
        ranks = []
        for rank_code, rank_data in RankSystem.RANKS.items():
            ranks.append(Rank(
                code=rank_code,
                name=rank_data["name"],
                color=rank_data["color"],
                min_level=rank_data["min_level"],
                max_level=rank_data["max_level"]
            ))
        return ranks

    @staticmethod
    def format_rank_display(rank: Rank) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞–Ω–≥–∞"""
        max_level_text = "‚àû" if rank.max_level == float('inf') else str(rank.max_level)
        return f"{rank.color} **{rank.code}** - {rank.name} ({rank.min_level}-{max_level_text})"