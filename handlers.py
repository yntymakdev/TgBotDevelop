import logging
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from models import Task, BotStates
from level_system import LevelSystem, RankSystem
from database import UserDatabase
from keyboards import (
    get_main_keyboard, get_tasks_keyboard, get_titles_keyboard,
    get_ranks_keyboard, get_rating_keyboard, get_rank_users_keyboard
)
from utils import (
    is_new_day, should_apply_penalty, format_user_stats,
    format_detailed_stats, format_top_users, calculate_penalty
)
from config import LEVEL_SYSTEM_CONFIG

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –≤ main.py)
db: UserDatabase = None


class BotStatesGroup(StatesGroup):
    waiting_for_task = State()


# –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await state.clear()

    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db.register_user(user_id, username)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–æ–≤—ã–π –ª–∏ –¥–µ–Ω—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if is_new_day(user_id, db):
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —à—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ–ø—É—Å–∫ –¥–Ω—è, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        if should_apply_penalty(user_id, db):
            penalty = calculate_penalty(user_id, db)
            db.apply_penalty(user_id, penalty)
            await message.answer(
                f"‚ö†Ô∏è –í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –¥–µ–Ω—å! –ü—Ä–∏–º–µ–Ω–µ–Ω —à—Ç—Ä–∞—Ñ: {penalty} –æ—á–∫–æ–≤ –æ–ø—ã—Ç–∞."
            )

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
        db.update_last_login(user_id)

    user_stats = db.get_user_stats(user_id)
    welcome_text = f"""
üéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–¥–∞—á –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π!

üë§ {username}
üìä –í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:
{format_user_stats(user_stats)}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
    """

    await message.answer(welcome_text, reply_markup=get_main_keyboard())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–¥–∞—á–∏"
@router.callback_query(F.data == "tasks")
async def show_tasks(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∑–∞–¥–∞—á"""
    await callback.answer()

    text = "üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞—á–∏:"
    await callback.message.edit_text(text, reply_markup=get_tasks_keyboard())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"
@router.callback_query(F.data == "add_task")
async def add_task(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    await callback.answer()

    await state.set_state(BotStatesGroup.waiting_for_task)

    text = """
üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:

–ü—Ä–∏–º–µ—Ä: "–ò–∑—É—á–∏—Ç—å Python –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —á–∞—Å–æ–≤"
    """

    await callback.message.edit_text(text, reply_markup=get_main_keyboard())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∑–∞–¥–∞—á–∏
@router.message(StateFilter(BotStatesGroup.waiting_for_task))
async def process_task_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏"""
    user_id = message.from_user.id
    task_description = message.text.strip()

    if not task_description:
        await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
        return

    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
    task = Task(
        user_id=user_id,
        description=task_description,
        created_at=datetime.now()
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    task_id = db.add_task(task)

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    await message.answer(
        f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\nüìù {task_description}\n\n"
        f"ID –∑–∞–¥–∞—á–∏: {task_id}",
        reply_markup=get_main_keyboard()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ –∑–∞–¥–∞—á–∏"
@router.callback_query(F.data == "my_tasks")
async def show_my_tasks(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await callback.answer()

    user_id = callback.from_user.id
    tasks = db.get_user_tasks(user_id)

    if not tasks:
        text = "üìã –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á."
    else:
        text = "üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n\n"
        for task in tasks:
            status = "‚úÖ" if task.completed else "‚è≥"
            text += f"{status} {task.id}. {task.description}\n"
            text += f"   üìÖ –°–æ–∑–¥–∞–Ω–∞: {task.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            if task.completed:
                text += f"   üéâ –í—ã–ø–æ–ª–Ω–µ–Ω–∞: {task.completed_at.strftime('%d.%m.%Y %H:%M')}\n"
            text += "\n"

    await callback.message.edit_text(text, reply_markup=get_main_keyboard())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É"
@router.callback_query(F.data == "complete_task")
async def complete_task_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á"""
    await callback.answer()

    user_id = callback.from_user.id
    active_tasks = db.get_user_active_tasks(user_id)

    if not active_tasks:
        text = "üìã –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."
        await callback.message.edit_text(text, reply_markup=get_main_keyboard())
        return

    text = "‚úÖ –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n\n"
    for task in active_tasks:
        text += f"‚è≥ {task.id}. {task.description}\n\n"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text=f"‚úÖ {task.id}. {task.description[:30]}...",
            callback_data=f"complete_task_{task.id}"
        )] for task in active_tasks
    ])
    keyboard.inline_keyboard.append([
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="tasks")
    ])

    await callback.message.edit_text(text, reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏
@router.callback_query(F.data.startswith("complete_task_"))
async def complete_specific_task(callback: CallbackQuery):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–¥–∞—á—É"""
    await callback.answer()

    user_id = callback.from_user.id
    task_id = int(callback.data.split("_")[-1])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    task = db.get_task(task_id)
    if not task or task.user_id != user_id:
        await callback.message.edit_text(
            "‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.",
            reply_markup=get_main_keyboard()
        )
        return

    if task.completed:
        await callback.message.edit_text(
            "‚úÖ –≠—Ç–∞ –∑–∞–¥–∞—á–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!",
            reply_markup=get_main_keyboard()
        )
        return

    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É
    db.complete_task(task_id)

    # –ü–æ–ª—É—á–∞–µ–º –æ–ø—ã—Ç –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    exp_gained = LEVEL_SYSTEM_CONFIG["task_completion_exp"]
    db.add_experience(user_id, exp_gained)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
    user_stats = db.get_user_stats(user_id)
    level_system = LevelSystem()
    new_level = level_system.get_level(user_stats.experience)

    if new_level > user_stats.level:
        db.update_level(user_id, new_level)
        level_up_text = f"\nüéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ {new_level} —É—Ä–æ–≤–Ω—è!"
    else:
        level_up_text = ""

    await callback.message.edit_text(
        f"‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\n\n"
        f"üìù {task.description}\n\n"
        f"üéØ –ü–æ–ª—É—á–µ–Ω–æ –æ–ø—ã—Ç–∞: +{exp_gained}\n"
        f"üìä –¢–µ–∫—É—â–∏–π –æ–ø—ã—Ç: {user_stats.experience + exp_gained}"
        f"{level_up_text}",
        reply_markup=get_main_keyboard()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
@router.callback_query(F.data == "stats")
async def show_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await callback.answer()

    user_id = callback.from_user.id
    user_stats = db.get_user_stats(user_id)

    text = f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n{format_detailed_stats(user_stats)}"

    await callback.message.edit_text(text, reply_markup=get_main_keyboard())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–†–µ–π—Ç–∏–Ω–≥"
@router.callback_query(F.data == "rating")
async def show_rating(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    await callback.answer()

    text = "üèÜ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–µ–π—Ç–∏–Ω–≥–∞:"
    await callback.message.edit_text(text, reply_markup=get_rating_keyboard())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–¢–æ–ø –ø–æ —É—Ä–æ–≤–Ω—è–º"
@router.callback_query(F.data == "top_levels")
async def show_top_levels(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —É—Ä–æ–≤–Ω—è–º"""
    await callback.answer()

    top_users = db.get_top_users_by_level(10)

    if not top_users:
        text = "üìä –†–µ–π—Ç–∏–Ω–≥ –ø–æ–∫–∞ –ø—É—Å—Ç."
    else:
        text = "üèÜ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —É—Ä–æ–≤–Ω—è–º:\n\n"
        text += format_top_users(top_users, "level")

    await callback.message.edit_text(text, reply_markup=get_rating_keyboard())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–¢–æ–ø –ø–æ –æ–ø—ã—Ç—É"
@router.callback_query(F.data == "top_exp")
async def show_top_experience(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ–ø—ã—Ç—É"""
    await callback.answer()

    top_users = db.get_top_users_by_experience(10)

    if not top_users:
        text = "üìä –†–µ–π—Ç–∏–Ω–≥ –ø–æ–∫–∞ –ø—É—Å—Ç."
    else:
        text = "üèÜ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ–ø—ã—Ç—É:\n\n"
        text += format_top_users(top_users, "experience")

    await callback.message.edit_text(text, reply_markup=get_rating_keyboard())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–≤–∞–Ω–∏—è"
@router.callback_query(F.data == "titles")
async def show_titles(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∑–≤–∞–Ω–∏–π"""
    await callback.answer()

    text = "üèÖ –°–∏—Å—Ç–µ–º–∞ –∑–≤–∞–Ω–∏–π:"
    await callback.message.edit_text(text, reply_markup=get_titles_keyboard())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–æ–µ –∑–≤–∞–Ω–∏–µ"
@router.callback_query(F.data == "my_title")
async def show_my_title(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await callback.answer()

    user_id = callback.from_user.id
    user_stats = db.get_user_stats(user_id)

    rank_system = RankSystem()
    current_rank = rank_system.get_rank(user_stats.level)
    next_rank = rank_system.get_next_rank(user_stats.level)

    text = f"üèÖ –í–∞—à–µ —Ç–µ–∫—É—â–µ–µ –∑–≤–∞–Ω–∏–µ:\n\n"
    text += f"üéñÔ∏è {current_rank['name']}\n"
    text += f"üìã {current_rank['description']}\n\n"
    text += f"üìä –£—Ä–æ–≤–µ–Ω—å: {user_stats.level}\n"

    if next_rank:
        text += f"\nüéØ –°–ª–µ–¥—É—é—â–µ–µ –∑–≤–∞–Ω–∏–µ: {next_rank['name']}\n"
        text += f"üìà –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Ä–æ–≤–µ–Ω—å: {next_rank['min_level']}\n"
        text += f"üî• –û—Å—Ç–∞–ª–æ—Å—å —É—Ä–æ–≤–Ω–µ–π: {next_rank['min_level'] - user_stats.level}"
    else:
        text += f"\nüèÜ –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–≤–∞–Ω–∏—è!"

    await callback.message.edit_text(text, reply_markup=get_titles_keyboard())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í—Å–µ –∑–≤–∞–Ω–∏—è"
@router.callback_query(F.data == "all_titles")
async def show_all_titles(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–≤–∞–Ω–∏—è"""
    await callback.answer()

    rank_system = RankSystem()
    all_ranks = rank_system.get_all_ranks()

    text = "üèÖ –í—Å–µ –∑–≤–∞–Ω–∏—è:\n\n"
    for rank in all_ranks:
        text += f"üéñÔ∏è {rank['name']}\n"
        text += f"üìã {rank['description']}\n"
        text += f"üìä –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Ä–æ–≤–µ–Ω—å: {rank['min_level']}\n\n"

    await callback.message.edit_text(text, reply_markup=get_titles_keyboard())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –∑–≤–∞–Ω–∏—è–º"
@router.callback_query(F.data == "rank_users")
async def show_rank_users_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∑–≤–∞–Ω–∏—è–º"""
    await callback.answer()

    text = "üèÜ –í—ã–±–µ—Ä–∏—Ç–µ –∑–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:"
    await callback.message.edit_text(text, reply_markup=get_rank_users_keyboard())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
@router.callback_query(F.data == "main_menu")
async def back_to_main(callback: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.answer()

    user_id = callback.from_user.id
    user_stats = db.get_user_stats(user_id)
    username = callback.from_user.username or callback.from_user.first_name

    text = f"""
üéØ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

üë§ {username}
üìä –í–∞—à–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:
{format_user_stats(user_stats)}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
    """

    await callback.message.edit_text(text, reply_markup=get_main_keyboard())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@router.message(Command("help"))
async def cmd_help(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
    help_text = """
üÜò –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É

üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

üéØ –§—É–Ω–∫—Ü–∏–∏:
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π –∏ –æ–ø—ã—Ç–∞
‚Ä¢ –†–µ–π—Ç–∏–Ω–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –∑–≤–∞–Ω–∏–π
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —à—Ç—Ä–∞—Ñ—ã –∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å

üìä –°–∏—Å—Ç–µ–º–∞ –æ–ø—ã—Ç–∞:
‚Ä¢ –ó–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏: +{task_exp} –æ–ø—ã—Ç–∞
‚Ä¢ –®—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ–ø—É—Å–∫ –¥–Ω—è: -{penalty} –æ–ø—ã—Ç–∞

üèÜ –ó–≤–∞–Ω–∏—è –ø–æ–ª—É—á–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è.
    """.format(
        task_exp=LEVEL_SYSTEM_CONFIG["task_completion_exp"],
        penalty=LEVEL_SYSTEM_CONFIG["daily_penalty"]
    )

    await message.answer(help_text, reply_markup=get_main_keyboard())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats
@router.message(Command("stats"))
async def cmd_stats(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É"""
    user_id = message.from_user.id
    user_stats = db.get_user_stats(user_id)

    if not user_stats:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return

    text = f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n{format_detailed_stats(user_stats)}"
    await message.answer(text, reply_markup=get_main_keyboard())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback_query
@router.callback_query()
async def unknown_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
    await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", show_alert=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message()
async def unknown_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await message.answer(
        "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.",
        reply_markup=get_main_keyboard()
    )