import asyncio
import logging
from aiohttp import web  # ‚úÖ aiohttp web server

from aiogram.webhook.aiohttp_server import SimpleRequestHandler
from datetime import datetime, timedelta
from typing import Dict, List, Optional
import json
import os
from dataclasses import dataclass, asdict
from enum import Enum

from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup,
    InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
)
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π)
BOT_TOKEN = "8143610615:AAE7VnGdGCehu9dVhs_jxPysT3rHc8H3I7E"

WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"https://yourdomain.com{WEBHOOK_PATH}"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)
# –°–∏—Å—Ç–µ–º–∞ —Ä–∞–Ω–≥–æ–≤
class Rank(Enum):
    E = "E"
    D = "D"
    C = "C"
    B = "B"
    A = "A"
    S = "S"
    SS = "SS"
    SSS = "SSS"
    NATIONAL = "National Level"
    MONARCH = "Monarch"


@dataclass
class RankInfo:
    rank: Rank
    name: str
    description: str
    emoji: str
    color: str
    min_level: int
    special_abilities: List[str]


# –°–∏—Å—Ç–µ–º–∞ —Ä–∞–Ω–≥–æ–≤ —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏
class RankSystem:
    RANKS = {
        Rank.E: RankInfo(
            rank=Rank.E,
            name="E-Rank Hunter",
            description="–ù–∞—á–∏–Ω–∞—é—â–∏–π –æ—Ö–æ—Ç–Ω–∏–∫",
            emoji="üü´",
            color="Brown",
            min_level=1,
            special_abilities=["–ë–∞–∑–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏"]
        ),
        Rank.D: RankInfo(
            rank=Rank.D,
            name="D-Rank Hunter",
            description="–°–ª–∞–±—ã–π –æ—Ö–æ—Ç–Ω–∏–∫",
            emoji="üü™",
            color="Purple",
            min_level=5,
            special_abilities=["–£—Å–∏–ª–µ–Ω–Ω–∞—è –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å", "–ë–∞–∑–æ–≤–∞—è –∏–Ω—Ç—É–∏—Ü–∏—è"]
        ),
        Rank.C: RankInfo(
            rank=Rank.C,
            name="C-Rank Hunter",
            description="–°—Ä–µ–¥–Ω–∏–π –æ—Ö–æ—Ç–Ω–∏–∫",
            emoji="üü¶",
            color="Blue",
            min_level=10,
            special_abilities=["–£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏–ª–∞", "–ë—ã—Å—Ç—Ä–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ", "–î—É—Ö–æ–≤–Ω–∞—è –∑–∞—â–∏—Ç–∞"]
        ),
        Rank.B: RankInfo(
            rank=Rank.B,
            name="B-Rank Hunter",
            description="–°–∏–ª—å–Ω—ã–π –æ—Ö–æ—Ç–Ω–∏–∫",
            emoji="üü©",
            color="Green",
            min_level=25,
            special_abilities=["–í—ã—Å–æ–∫–∞—è —Å–∏–ª–∞", "–õ–∏–¥–µ—Ä—Å–∫–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞", "–ó–∞—â–∏—Ç–∞ –æ—Ç —Å–≥–ª–∞–∑–∞"]
        ),
        Rank.A: RankInfo(
            rank=Rank.A,
            name="A-Rank Hunter",
            description="–≠–ª–∏—Ç–Ω—ã–π –æ—Ö–æ—Ç–Ω–∏–∫",
            emoji="üü®",
            color="Yellow",
            min_level=50,
            special_abilities=["–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è —Å–∏–ª–∞", "–¢–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ", "–ë–∞—Ä–∞–∫–∞—Ç –≤ –¥–µ–ª–∞—Ö"]
        ),
        Rank.S: RankInfo(
            rank=Rank.S,
            name="S-Rank Hunter",
            description="–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –æ—Ö–æ—Ç–Ω–∏–∫",
            emoji="üüß",
            color="Orange",
            min_level=100,
            special_abilities=["–ù–µ–≤–µ—Ä–æ—è—Ç–Ω–∞—è —Å–∏–ª–∞", "–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –æ–±—É—á–∞—Ç—å", "–û—Å–æ–±–∞—è —Å–≤—è–∑—å —Å –ê–ª–ª–∞—Ö–æ–º"]
        ),
        Rank.SS: RankInfo(
            rank=Rank.SS,
            name="SS-Rank Hunter",
            description="–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π –æ—Ö–æ—Ç–Ω–∏–∫",
            emoji="üü•",
            color="Red",
            min_level=250,
            special_abilities=["–°–≤–µ—Ä—Ö—ä–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏", "–í–ª–∏—è–Ω–∏–µ –Ω–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ", "–ß—É–¥–µ—Å–∞ —á–µ—Ä–µ–∑ –¥—É–∞"]
        ),
        Rank.SSS: RankInfo(
            rank=Rank.SSS,
            name="SSS-Rank Hunter",
            description="–ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ö–æ—Ç–Ω–∏–∫",
            emoji="‚≠ê",
            color="Gold",
            min_level=500,
            special_abilities=["–ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–∏–ª–∞", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—É–¥–µ–±", "–ü—Ä—è–º–∞—è —Å–≤—è–∑—å —Å –Ω–µ–±–µ—Å–∞–º–∏"]
        ),
        Rank.NATIONAL: RankInfo(
            rank=Rank.NATIONAL,
            name="National Level Hunter",
            description="–û—Ö–æ—Ç–Ω–∏–∫ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è",
            emoji="üëë",
            color="Royal",
            min_level=1000,
            special_abilities=["–ó–∞—â–∏—Ç–∞ –Ω–∞—Ü–∏–∏", "–ú–∞—Å—Å–æ–≤–æ–µ –≤–ª–∏—è–Ω–∏–µ", "–ü–æ–∫—Ä–æ–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ –ê–ª–ª–∞—Ö–∞"]
        ),
        Rank.MONARCH: RankInfo(
            rank=Rank.MONARCH,
            name="Monarch",
            description="–ú–æ–Ω–∞—Ä—Ö - –≤—ã—Å—à–∏–π —Ä–∞–Ω–≥",
            emoji="üî•",
            color="Divine",
            min_level=2000,
            special_abilities=["–ê–±—Å–æ–ª—é—Ç–Ω–∞—è —Å–∏–ª–∞", "–ö–æ–Ω—Ç—Ä–æ–ª—å —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏", "–•–∞–ª–∏—Ñ –Ω–∞ –∑–µ–º–ª–µ"]
        )
    }

    @staticmethod
    def get_rank_by_level(level: int) -> RankInfo:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞–Ω–≥ –ø–æ —É—Ä–æ–≤–Ω—é"""
        for rank in reversed(list(RankSystem.RANKS.values())):
            if level >= rank.min_level:
                return rank
        return RankSystem.RANKS[Rank.E]

    @staticmethod
    def get_next_rank(current_rank: Rank) -> Optional[RankInfo]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–Ω–≥"""
        ranks_order = [Rank.E, Rank.D, Rank.C, Rank.B, Rank.A, Rank.S, Rank.SS, Rank.SSS, Rank.NATIONAL, Rank.MONARCH]
        try:
            current_index = ranks_order.index(current_rank)
            if current_index < len(ranks_order) - 1:
                next_rank = ranks_order[current_index + 1]
                return RankSystem.RANKS[next_rank]
        except ValueError:
            pass
        return None

    @staticmethod
    def get_rank_progress(level: int) -> tuple:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–Ω–≥–∞"""
        current_rank = RankSystem.get_rank_by_level(level)
        next_rank = RankSystem.get_next_rank(current_rank.rank)

        if next_rank:
            progress = level - current_rank.min_level
            required = next_rank.min_level - current_rank.min_level
            return progress, required, next_rank
        return 0, 0, None


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class BotStates(StatesGroup):
    waiting_for_task = State()
    waiting_for_xp = State()


@dataclass
class Task:
    name: str
    xp_reward: int
    completed: bool = False
    completion_time: Optional[datetime] = None


@dataclass
class Title:
    name: str
    description: str
    achieved: bool = False
    achieved_date: Optional[datetime] = None


@dataclass
class UserStats:
    user_id: int
    username: str
    level: int = 1
    xp: int = 0
    total_xp: int = 0
    current_rank: str = "E"  # –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ –¥–ª—è —Ä–∞–Ω–≥–∞
    daily_tasks: List[Task] = None
    titles: List[Title] = None
    last_reset: datetime = None
    penalty_applied: bool = False

    def __post_init__(self):
        if self.daily_tasks is None:
            self.daily_tasks = self.get_default_tasks()
        if self.titles is None:
            self.titles = self.get_default_titles()
        if self.last_reset is None:
            self.last_reset = datetime.now()

    def get_default_tasks(self) -> List[Task]:
        return [
            Task("–ö–æ—Ä–∞–Ω 2 –∞—è—Ç + –ø–µ—Ä–µ–≤–æ–¥ ", 4),
            Task("–ê—Ä–∞–±—Å–∫–∏–π —Ç–µ–∫—Å—Ç 10 —Å–ª–æ–≤", 5),
            Task("–ê–Ω–≥–ª–∏–π—Å–∫–∏–π 10 —Å–ª–æ–≤", 4),
            Task("100 –æ—Ç–∂–∏–º–∞–Ω–∏–µ", 5),
            Task("100 –ø—Ä–µ—Å–∏–¥–∞–Ω–∏–µ", 5),
            Task("100 –ø—Ä–µ—Å—Å", 5),
            Task("100 —Ç—É—Ä–Ω–∏–∫", 5),
            Task("–ü–æ–º–æ—â—å —Ä–æ–¥–∏—Ç–µ–ª—è–º", 5),
            Task("–ó–∏–∫—Ä –º–∏–Ω–∏–º—É–º 100 —Ä–∞–∑", 3),
            Task("–î–∞–∞–≤–∞—Ç (–ø—Ä–∏–∑—ã–≤ –∫ –ò—Å–ª–∞–º—É)", 5),
            Task("–û–±—É—á–µ–Ω–∏–µ –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞", 5),
        ]

    def get_default_titles(self) -> List[Title]:
        return [
            Title("–•–∞—Ñ–∏–∑", "–í–µ—Å—å –ö–æ—Ä–∞–Ω –Ω–∞–∏–∑—É—Å—Ç—å"),
            Title("–°—Ç—Ä–æ–∏—Ç–µ–ª—å –º–µ—á–µ—Ç–∏", "–£—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–µ –º–µ—á–µ—Ç–∏"),
            Title("–£—á–∏—Ç–µ–ª—å –ø–æ–∫–æ–ª–µ–Ω–∏–π", "–ù–∞—É—á–∏–ª 100+ —á–µ–ª–æ–≤–µ–∫"),
            Title("–†–∞–¥—É—é—â–∏–π —Ä–æ–¥–∏—Ç–µ–ª–µ–π", "–†–æ–¥–∏—Ç–µ–ª–∏ –¥–æ–≤–æ–ª—å–Ω—ã"),
            Title("–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π", "40 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –≤—ã–ø–æ–ª–Ω—è–ª –¥–µ–ª–æ —Ä–∞–¥–∏ –ê–ª–ª–∞—Ö–∞"),
            Title("–ß–∏—Å—Ç—ã–π –≤ –æ–º–æ–≤–µ–Ω–∏–∏", "–ù–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ç–∞—Ö–∞—Ä–∞—Ç"),
            Title("–ú—É—Å—Ç–∞–∏–¥", "–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ —Ä–∞–¥–∏ –ø–æ–∫–ª–æ–Ω–µ–Ω–∏—è"),
            Title("–ó–∏–∫—Ä—è—â–∏–π", "–î–µ–ª–∞–µ—Ç –∑–∏–∫—Ä –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –º–∏–Ω–∏–º—É–º 100 —Ä–∞–∑"),
        ]

    def update_rank(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–∞–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è"""
        new_rank = RankSystem.get_rank_by_level(self.level)
        old_rank = self.current_rank
        self.current_rank = new_rank.rank.value
        return old_rank != self.current_rank, new_rank

    def get_rank_info(self) -> RankInfo:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Ä–∞–Ω–≥–µ"""
        try:
            rank_enum = Rank(self.current_rank)
            return RankSystem.RANKS[rank_enum]
        except ValueError:
            return RankSystem.RANKS[Rank.E]


# –°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π (–∫–∞–∫ –≤ Solo Leveling)
class LevelSystem:
    XP_REQUIREMENTS = {
        1: 10, 2: 30, 3: 50, 4: 100, 5: 500,
        10: 1000, 25: 2500, 50: 5000, 100: 10000
    }

    @staticmethod
    def get_xp_for_next_level(current_level: int) -> int:
        if current_level < 5:
            return LevelSystem.XP_REQUIREMENTS.get(current_level + 1, 100)
        elif current_level < 10:
            return 500
        elif current_level < 25:
            return 1000
        elif current_level < 50:
            return 2500
        else:
            return 5000

    @staticmethod
    def calculate_level(total_xp: int) -> int:
        level = 1
        xp_needed = 0

        for lvl in sorted(LevelSystem.XP_REQUIREMENTS.keys()):
            xp_needed += LevelSystem.XP_REQUIREMENTS[lvl]
            if total_xp >= xp_needed:
                level = lvl
            else:
                break

        return level


# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
class UserDatabase:
    def __init__(self):
        self.users: Dict[int, UserStats] = {}
        self.data_file = "users_data.json"
        self.load_data()

    def load_data(self):
        try:
            if os.path.exists(self.data_file):
                with open(self.data_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    for user_id, user_data in data.items():
                        if 'rank' in user_data and 'current_rank' not in user_data:
                            user_data['current_rank'] = user_data.pop('rank')
                        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è datetime —Å—Ç—Ä–æ–∫ –æ–±—Ä–∞—Ç–Ω–æ –≤ datetime –æ–±—ä–µ–∫—Ç—ã
                        if user_data.get('last_reset'):
                            user_data['last_reset'] = datetime.fromisoformat(user_data['last_reset'])

                        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–¥–∞—á
                        tasks = []
                        for task_data in user_data.get('daily_tasks', []):
                            task = Task(**task_data)
                            if task.completion_time:
                                task.completion_time = datetime.fromisoformat(task.completion_time)
                            tasks.append(task)
                        user_data['daily_tasks'] = tasks

                        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ç–∏—Ç—É–ª–æ–≤
                        titles = []
                        for title_data in user_data.get('titles', []):
                            title = Title(**title_data)
                            if title.achieved_date:
                                title.achieved_date = datetime.fromisoformat(title.achieved_date)
                            titles.append(title)
                        user_data['titles'] = titles

                        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ current_rank –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                        if 'current_rank' not in user_data:
                            user_data['current_rank'] = 'E'

                        self.users[int(user_id)] = UserStats(**user_data)
        except Exception as e:
            logger.error(f"Error loading data: {e}")

    def save_data(self):
        try:
            data = {}
            for user_id, user_stats in self.users.items():
                user_dict = asdict(user_stats)

                # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è datetime –≤ —Å—Ç—Ä–æ–∫–∏
                if user_dict.get('last_reset'):
                    user_dict['last_reset'] = user_dict['last_reset'].isoformat()

                # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–¥–∞—á
                for task in user_dict.get('daily_tasks', []):
                    if task.get('completion_time'):
                        task['completion_time'] = task['completion_time'].isoformat()

                # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ç–∏—Ç—É–ª–æ–≤
                for title in user_dict.get('titles', []):
                    if title.get('achieved_date'):
                        title['achieved_date'] = title['achieved_date'].isoformat()

                data[str(user_id)] = user_dict

            with open(self.data_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"Error saving data: {e}")

    def get_user(self, user_id: int, username: str = "") -> UserStats:
        if user_id not in self.users:
            self.users[user_id] = UserStats(user_id=user_id, username=username)
            self.save_data()
        return self.users[user_id]

    def update_user(self, user_stats: UserStats):
        self.users[user_stats.user_id] = user_stats
        self.save_data()


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
db = UserDatabase()

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –ú–æ–π –°—Ç–∞—Ç—É—Å"), KeyboardButton(text="‚úÖ –ó–∞–¥–∞—á–∏")],
            [KeyboardButton(text="üéñÔ∏è –ú–æ–π –†–∞–Ω–≥"), KeyboardButton(text="üèÜ –¢–∏—Ç—É–ª—ã")],
            [KeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ó–∞–¥–∞—á—É")],
            [KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
        ],
        resize_keyboard=True
    )
    return keyboard


def get_tasks_keyboard(tasks: List[Task]):
    keyboard = []
    for i, task in enumerate(tasks):
        status = "‚úÖ" if task.completed else "‚è≥"
        keyboard.append([InlineKeyboardButton(
            text=f"{status} {task.name} (+{task.xp_reward}XP)",
            callback_data=f"task_{i}"
        )])

    keyboard.append([InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_tasks")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_titles_keyboard(titles: List[Title]):
    keyboard = []
    for i, title in enumerate(titles):
        status = "üèÜ" if title.achieved else "üîí"
        keyboard.append([InlineKeyboardButton(
            text=f"{status} {title.name}",
            callback_data=f"title_{i}"
        )])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_rank_keyboard():
    keyboard = [
        [InlineKeyboardButton(text="üìä –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Ä–∞–Ω–≥–∞", callback_data="rank_abilities")],
        [InlineKeyboardButton(text="üéØ –°–ª–µ–¥—É—é—â–∏–π —Ä–∞–Ω–≥", callback_data="next_rank")],
        [InlineKeyboardButton(text="üìà –í—Å–µ —Ä–∞–Ω–≥–∏", callback_data="all_ranks")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤—Ä–µ–º–µ–Ω–µ–º
def is_new_day(last_reset: datetime) -> bool:
    return datetime.now().date() > last_reset.date()


def time_until_reset() -> str:
    now = datetime.now()
    tomorrow = now.replace(hour=0, minute=0, second=0, microsecond=0) + timedelta(days=1)
    time_left = tomorrow - now

    hours = int(time_left.total_seconds() // 3600)
    minutes = int((time_left.total_seconds() % 3600) // 60)

    return f"{hours}—á {minutes}–º"


def should_apply_penalty(last_reset: datetime) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–æ—à–ª–æ –ª–∏ –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–±—Ä–æ—Å–∞"""
    return datetime.now() - last_reset > timedelta(hours=24)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@router.message(Command("start"))
async def cmd_start(message: Message):
    user_stats = db.get_user(message.from_user.id, message.from_user.username or "")
    rank_info = user_stats.get_rank_info()

    welcome_text = f"""
üïå **–ú—É—Å—É–ª—å–º–∞–Ω—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –†–∞–∑–≤–∏—Ç–∏—è**
‚ôæÔ∏è –¶–µ–ª—å: –£–ª—É—á—à–µ–Ω–∏–µ –¥–æ —Å–∞–º–æ–π —Å–º–µ—Ä—Ç–∏

üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É—Ä–æ–≤–Ω–µ–π, {message.from_user.first_name}!

üìä –í–∞—à —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:
üÜô Level: {user_stats.level}
{rank_info.emoji} –†–∞–Ω–≥: {rank_info.name}
‚≠êÔ∏è XP: {user_stats.xp}/{LevelSystem.get_xp_for_next_level(user_stats.level)}
üéØ –û–±—â–∏–π XP: {user_stats.total_xp}

‚è∞ –í—Ä–µ–º—è –¥–æ —Å–±—Ä–æ—Å–∞: {time_until_reset()}

üìå –í–∞–∂–Ω–æ:
‚Ä¢ Level ‚Äî –Ω–µ —Ñ–∏–Ω–∞–ª, –∞ "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥—É—à–∏"
‚Ä¢ –†–∞–Ω–≥ ‚Äî –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –≤–∞—à–µ–π —Å–∏–ª—ã –∫–∞–∫ –º—É—Å—É–ª—å–º–∞–Ω–∏–Ω–∞
‚Ä¢ XP ‚Äî —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è –∑–∞ –∏—Å–∫—Ä–µ–Ω–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
‚Ä¢ –ì—Ä–µ—Ö–∏, –ø–æ–∫–∞–∑—É—Ö–∞, –ª–µ–Ω—å ‚Äî —Å–Ω–∏–∂–∞—é—Ç XP
‚Ä¢ –ö–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî —ç—Ç–æ —à–∞–Ω—Å —Ä–∞—Å—Ç–∏ —Ä–∞–¥–∏ –ê–ª–ª–∞—Ö–∞

üåü –ü—É—Ç—å –¥–æ —Å–º–µ—Ä—Ç–∏ ‚Äî –ø—É—Ç—å —Å–ª—É–∂–µ–Ω–∏—è –∏ —Ä–∞–∑–≤–∏—Ç–∏—è

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:
"""

    await message.answer(welcome_text, reply_markup=get_main_keyboard(), parse_mode="Markdown")


@router.message(F.text == "üìä –ú–æ–π –°—Ç–∞—Ç—É—Å")
async def show_status(message: Message):
    user_stats = db.get_user(message.from_user.id, message.from_user.username or "")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–æ–≤—ã–π –¥–µ–Ω—å –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —à—Ç—Ä–∞—Ñ–æ–≤
    if is_new_day(user_stats.last_reset):
        if should_apply_penalty(user_stats.last_reset) and not user_stats.penalty_applied:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —à—Ç—Ä–∞—Ñ—ã –∑–∞ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            penalty_xp = 0
            for task in user_stats.daily_tasks:
                if not task.completed:
                    penalty_xp += 10

            user_stats.xp = max(0, user_stats.xp - penalty_xp)  # ‚úÖ —Ç–µ–ø–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ

            user_stats.penalty_applied = True

            if penalty_xp > 0:
                await message.answer(f"‚ö†Ô∏è –®—Ç—Ä–∞—Ñ –ø—Ä–∏–º–µ–Ω–µ–Ω! -{penalty_xp}XP –∑–∞ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤—á–µ—Ä–∞",
                                     parse_mode="Markdown")

        # –°–±—Ä–æ—Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á
        user_stats.daily_tasks = user_stats.get_default_tasks()
        user_stats.last_reset = datetime.now()
        user_stats.penalty_applied = False
        db.update_user(user_stats)

    # –ü–µ—Ä–µ—Å—á–µ—Ç —É—Ä–æ–≤–Ω—è
    new_level = LevelSystem.calculate_level(user_stats.total_xp)
    if new_level != user_stats.level:
        user_stats.level = new_level

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≤—ã—à–µ–Ω–∏—è —Ä–∞–Ω–≥–∞
        rank_up, new_rank_info = user_stats.update_rank()
        if rank_up:
            await message.answer(f"üéâ RANK UP! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —Ä–∞–Ω–≥–∞ {new_rank_info.emoji} {new_rank_info.name}!\n"
                                 f"üî• –ù–æ–≤—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!", parse_mode="Markdown")

        db.update_user(user_stats)
        await message.answer(f"üéâ LEVEL UP! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —É—Ä–æ–≤–Ω—è {new_level}!", parse_mode="Markdown")

    completed_tasks = sum(1 for task in user_stats.daily_tasks if task.completed)
    total_tasks = len(user_stats.daily_tasks)
    rank_info = user_stats.get_rank_info()

    status_text = f"""
üéÆ –°–ò–°–¢–ï–ú–ê –£–†–û–í–ù–ï–ô SOLO LEVELING

üë§ –ò–≥—Ä–æ–∫: {message.from_user.first_name}
üÜô Level: {user_stats.level}
{rank_info.emoji} –†–∞–Ω–≥: {rank_info.name}
‚≠êÔ∏è XP: {user_stats.xp}/{LevelSystem.get_xp_for_next_level(user_stats.level)}
üéØ –û–±—â–∏–π XP: {user_stats.total_xp}

üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y')}
‚úÖ –ó–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã: {completed_tasks}/{total_tasks}
üìä XP –∑–∞ –¥–µ–Ω—å: {sum(task.xp_reward for task in user_stats.daily_tasks if task.completed)}

‚è∞ –í—Ä–µ–º—è –¥–æ —Å–±—Ä–æ—Å–∞: {time_until_reset()}

üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: {sum(1 for title in user_stats.titles if title.achieved)}/{len(user_stats.titles)}
"""

    await message.answer(status_text, parse_mode="Markdown")


@router.message(F.text == "üéñÔ∏è –ú–æ–π –†–∞–Ω–≥")
async def show_rank(message: Message):
    user_stats = db.get_user(message.from_user.id, message.from_user.username or "")
    rank_info = user_stats.get_rank_info()

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–Ω–≥–∞
    progress, required, next_rank = RankSystem.get_rank_progress(user_stats.level)

    progress_text = ""
    if next_rank:
        progress_bar = "‚ñì" * (progress * 10 // required) + "‚ñë" * (10 - (progress * 10 // required))
        progress_text = f"""
üìà –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–Ω–≥–∞:
{next_rank.emoji} {next_rank.name}
[{progress_bar}] {progress}/{required} —É—Ä–æ–≤–Ω–µ–π

üí° –ù—É–∂–Ω–æ –¥–æ—Å—Ç–∏—á—å {next_rank.min_level} —É—Ä–æ–≤–Ω—è
"""
    else:
        progress_text = "\nüî• –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–Ω–≥–∞!"

    abilities_text = "\n".join([f"‚Ä¢ {ability}" for ability in rank_info.special_abilities])

    rank_text = f"""
üéñÔ∏è –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –†–ê–ù–ì–ï

{rank_info.emoji} **{rank_info.name}**
üìù {rank_info.description}

üî• –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏:
{abilities_text}

üìä –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å: {rank_info.min_level}
‚Ä¢ –í–∞—à —É—Ä–æ–≤–µ–Ω—å: {user_stats.level}
{progress_text}

üí™ –ß–µ–º –≤—ã—à–µ —Ä–∞–Ω–≥, —Ç–µ–º –±–æ–ª—å—à–µ –±–∞—Ä–∞–∫–∞—Ç –≤ –≤–∞—à–∏—Ö –¥–µ–ª–∞—Ö!
"""

    await message.answer(rank_text, reply_markup=get_rank_keyboard(), parse_mode="Markdown")


@router.message(F.text == "‚úÖ –ó–∞–¥–∞—á–∏")
async def show_tasks(message: Message):
    user_stats = db.get_user(message.from_user.id, message.from_user.username or "")

    tasks_text = f"""
üìã –ï–ñ–ï–î–ù–ï–í–ù–´–ï –ó–ê–î–ê–ß–ò

‚è∞ –í—Ä–µ–º—è –¥–æ —Å–±—Ä–æ—Å–∞: {time_until_reset()}

–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–∞–¥–∞—á—É —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é:
"""

    await message.answer(tasks_text, reply_markup=get_tasks_keyboard(user_stats.daily_tasks), parse_mode="Markdown")


@router.message(F.text == "üèÜ –¢–∏—Ç—É–ª—ã")
async def show_titles(message: Message):
    user_stats = db.get_user(message.from_user.id, message.from_user.username or "")

    titles_text = f"""
üèÜ –¢–ò–¢–£–õ–´ –ò –î–û–°–¢–ò–ñ–ï–ù–ò–Ø

–í–∞—à–∏ —Ç–∏—Ç—É–ª—ã: {sum(1 for title in user_stats.titles if title.achieved)}/{len(user_stats.titles)}

–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç–∏—Ç—É–ª —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:
"""

    await message.answer(titles_text, reply_markup=get_titles_keyboard(user_stats.titles), parse_mode="Markdown")


@router.message(F.text == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_statistics(message: Message):
    user_stats = db.get_user(message.from_user.id, message.from_user.username or "")
    rank_info = user_stats.get_rank_info()

    days_active = (datetime.now() - user_stats.last_reset).days + 1
    avg_xp_per_day = user_stats.total_xp / max(days_active, 1)

    stats_text = f"""
üìà –ü–û–î–†–û–ë–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê

üéÆ –ü—Ä–æ–≥—Ä–µ—Å—Å –≤ —Å–∏—Å—Ç–µ–º–µ:
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: {user_stats.level}
‚Ä¢ –†–∞–Ω–≥: {rank_info.emoji} {rank_info.name}
‚Ä¢ –¢–µ–∫—É—â–∏–π XP: {user_stats.xp}
‚Ä¢ –û–±—â–∏–π XP: {user_stats.total_xp}
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ XP –≤ –¥–µ–Ω—å: {avg_xp_per_day:.1f}

üìä –ó–∞–¥–∞—á–∏ —Å–µ–≥–æ–¥–Ω—è:
"""

    for task in user_stats.daily_tasks:
        status = "‚úÖ" if task.completed else "‚ùå"
        time_completed = task.completion_time.strftime("%H:%M") if task.completion_time else "‚Äî"
        stats_text += f"‚Ä¢ {status} {task.name} ({time_completed})\n"

    stats_text += f"""
üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:
‚Ä¢ –ü–æ–ª—É—á–µ–Ω–æ —Ç–∏—Ç—É–ª–æ–≤: {sum(1 for title in user_stats.titles if title.achieved)}
‚Ä¢ –í—Å–µ–≥–æ —Ç–∏—Ç—É–ª–æ–≤: {len(user_stats.titles)}

‚è∞ –í—Ä–µ–º—è:
‚Ä¢ –î–Ω–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ: {days_active}
‚Ä¢ –í—Ä–µ–º—è –¥–æ —Å–±—Ä–æ—Å–∞: {time_until_reset()}
"""

    await message.answer(stats_text, parse_mode="Markdown")


@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ó–∞–¥–∞—á—É")
async def add_task_start(message: Message, state: FSMContext):
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏:", parse_mode="Markdown")
    await state.set_state(BotStates.waiting_for_task)


@router.message(StateFilter(BotStates.waiting_for_task))
async def add_task_name(message: Message, state: FSMContext):
    task_name = message.text.strip()
    if len(task_name) > 100:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    await state.update_data(task_name=task_name)
    await message.answer("üéØ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ XP –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (1-50):", parse_mode="Markdown")
    await state.set_state(BotStates.waiting_for_xp)


@router.message(StateFilter(BotStates.waiting_for_xp))
async def add_task_xp(message: Message, state: FSMContext):
    try:
        xp_reward = int(message.text.strip())
        if xp_reward < 1 or xp_reward > 50:
            await message.answer("‚ùå XP –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 50.")
            return

        data = await state.get_data()
        task_name = data['task_name']

        user_stats = db.get_user(message.from_user.id, message.from_user.username or "")
        user_stats.daily_tasks.append(Task(name=task_name, xp_reward=xp_reward))
        db.update_user(user_stats)

        await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!**\nüìù {task_name}\nüéØ +{xp_reward}XP", parse_mode="Markdown")
        await state.clear()

    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")


@router.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def show_help(message: Message):
    help_text = """
üéÆ **–ü–û–ú–û–©–¨ –ü–û –°–ò–°–¢–ï–ú–ï –£–†–û–í–ù–ï–ô

üéØ –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:
‚Ä¢ –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è XP
‚Ä¢ –ù–∞–∫–∞–ø–ª–∏–≤–∞–π—Ç–µ XP –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
‚Ä¢ –ó–∞ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è —à—Ç—Ä–∞—Ñ—ã

üìä –°–∏—Å—Ç–µ–º–∞ XP:
‚Ä¢ 1-2 —É—Ä–æ–≤–µ–Ω—å: 10XP
‚Ä¢ 2-3 —É—Ä–æ–≤–µ–Ω—å: 30XP
‚Ä¢ 3-4 —É—Ä–æ–≤–µ–Ω—å: 50XP
‚Ä¢ 4-5 —É—Ä–æ–≤–µ–Ω—å: 100XP
‚Ä¢ 5-10 —É—Ä–æ–≤–µ–Ω—å: 500XP –∫–∞–∂–¥—ã–π
‚Ä¢ 10-25 —É—Ä–æ–≤–µ–Ω—å: 1000XP –∫–∞–∂–¥—ã–π

‚ö†Ô∏è –®—Ç—Ä–∞—Ñ—ã:
‚Ä¢ –ó–∞ –∫–∞–∂–¥—É—é –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É: -10XP
‚Ä¢ –®—Ç—Ä–∞—Ñ—ã –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞ –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞

üéÆ –ö–Ω–æ–ø–∫–∏:
‚Ä¢ üìä –ú–æ–π –°—Ç–∞—Ç—É—Å - —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∏ XP
‚Ä¢ ‚úÖ –ó–∞–¥–∞—á–∏ - —Å–ø–∏—Å–æ–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á
‚Ä¢ üèÜ –¢–∏—Ç—É–ª—ã - –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –Ω–∞–≥—Ä–∞–¥—ã
‚Ä¢ üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ ‚ûï –î–æ–±–∞–≤–∏—Ç—å –ó–∞–¥–∞—á—É - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É

ü§≤ –ü–æ–º–Ω–∏—Ç–µ: –≠—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –¥—É—Ö–æ–≤–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞ —Ä–∞–¥–∏ –ê–ª–ª–∞—Ö–∞!
"""

    await message.answer(help_text, parse_mode="Markdown")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@router.callback_query(F.data.startswith("task_"))
async def handle_task_completion(callback: CallbackQuery):
    try:
        task_index = int(callback.data.split("_")[1])
        user_stats = db.get_user(callback.from_user.id, callback.from_user.username or "")

        if 0 <= task_index < len(user_stats.daily_tasks):
            task = user_stats.daily_tasks[task_index]

            if not task.completed:
                task.completed = True
                task.completion_time = datetime.now()
                user_stats.xp += task.xp_reward
                user_stats.total_xp += task.xp_reward

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
                new_level = LevelSystem.calculate_level(user_stats.total_xp)
                level_up_text = ""
                if new_level > user_stats.level:
                    user_stats.level = new_level
                    level_up_text = f"\nüéâ LEVEL UP! –£—Ä–æ–≤–µ–Ω—å {new_level}!"

                db.update_user(user_stats)

                await callback.answer(f"‚úÖ +{task.xp_reward}XP!" + level_up_text, show_alert=True)

                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
                await callback.message.edit_reply_markup(reply_markup=get_tasks_keyboard(user_stats.daily_tasks))
            else:
                await callback.answer("‚úÖ –ó–∞–¥–∞—á–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!", show_alert=True)
        else:
            await callback.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)

    except Exception as e:
        logger.error(f"Error in task completion: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", show_alert=True)


@router.callback_query(F.data == "refresh_tasks")
async def refresh_tasks(callback: CallbackQuery):
    user_stats = db.get_user(callback.from_user.id, callback.from_user.username or "")
    await callback.message.edit_reply_markup(reply_markup=get_tasks_keyboard(user_stats.daily_tasks))
    await callback.answer("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ!")


@router.callback_query(F.data.startswith("title_"))
async def handle_title_info(callback: CallbackQuery):
    try:
        title_index = int(callback.data.split("_")[1])
        user_stats = db.get_user(callback.from_user.id, callback.from_user.username or "")

        if 0 <= title_index < len(user_stats.titles):
            title = user_stats.titles[title_index]
            status = "üèÜ –ü–æ–ª—É—á–µ–Ω" if title.achieved else "üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
            date_text = f"\nüìÖ –ü–æ–ª—É—á–µ–Ω: {title.achieved_date.strftime('%d.%m.%Y')}" if title.achieved_date else ""

            title_info = f"""
üèÜ {title.name}

üìù –û–ø–∏—Å–∞–Ω–∏–µ: {title.description}
üéØ –°—Ç–∞—Ç—É—Å: {status}{date_text}

üí° –°–æ–≤–µ—Ç: –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏—Ç—É–ª–æ–≤!
"""

            await callback.answer(title_info, show_alert=True)
        else:
            await callback.answer("‚ùå –¢–∏—Ç—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)

    except Exception as e:
        logger.error(f"Error in title info: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", show_alert=True)


@router.callback_query(F.data == "rank_abilities")
async def show_rank_abilities(callback: CallbackQuery):
    user_stats = db.get_user(callback.from_user.id, callback.from_user.username or "")
    rank_info = user_stats.get_rank_info()

    abilities_text = "\n".join([f"‚Ä¢ {ability}" for ability in rank_info.special_abilities])

    abilities_info = f"""
üî• –°–ü–û–°–û–ë–ù–û–°–¢–ò –†–ê–ù–ì–ê {rank_info.emoji} {rank_info.name}

{abilities_text}

üí° –≠—Ç–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø–æ–º–æ–≥–∞—é—Ç –≤ –¥—É—Ö–æ–≤–Ω–æ–º —Ä–∞–∑–≤–∏—Ç–∏–∏!
"""

    await callback.answer(abilities_info, show_alert=True)


@router.callback_query(F.data == "next_rank")
async def show_next_rank(callback: CallbackQuery):
    user_stats = db.get_user(callback.from_user.id, callback.from_user.username or "")
    current_rank_info = user_stats.get_rank_info()

    next_rank = RankSystem.get_next_rank(current_rank_info.rank)

    if next_rank:
        levels_needed = next_rank.min_level - user_stats.level

        next_rank_info = f"""
üéØ –°–õ–ï–î–£–Æ–©–ò–ô –†–ê–ù–ì: {next_rank.emoji} {next_rank.name}

üìä –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –ù—É–∂–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å: {next_rank.min_level}
- –í–∞—à —É—Ä–æ–≤–µ–Ω—å: {user_stats.level}
- –û—Å—Ç–∞–ª–æ—Å—å: {levels_needed} —É—Ä.

üí™ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞—á–∏!
"""
    else:
        next_rank_info = f"""
üî• –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ô –†–ê–ù–ì!

{current_rank_info.emoji} –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –≤—ã—Å—à–µ–≥–æ —Ä–∞–Ω–≥–∞: {current_rank_info.name}

üëë –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!
"""

    await callback.answer(next_rank_info, show_alert=True)


@router.callback_query(F.data == "all_ranks")
async def show_all_ranks(callback: CallbackQuery):
    user_stats = db.get_user(callback.from_user.id, callback.from_user.username or "")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –Ω–µ alert
    ranks_text = "üéñÔ∏è **–í–°–ï –†–ê–ù–ì–ò –í –°–ò–°–¢–ï–ú–ï:**\n\n"

    for rank_enum in [Rank.E, Rank.D, Rank.C, Rank.B, Rank.A, Rank.S, Rank.SS, Rank.SSS, Rank.NATIONAL, Rank.MONARCH]:
        rank_info = RankSystem.RANKS[rank_enum]

        current_mark = " ‚Üê –í–´" if user_stats.current_rank == rank_enum.value else ""

        ranks_text += f"{rank_info.emoji} **{rank_info.name}** (–£—Ä.{rank_info.min_level}+){current_mark}\n"

    ranks_text += "\nüí° –ü–æ–≤—ã—à–∞–π—Ç–µ —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –Ω–æ–≤—ã—Ö —Ä–∞–Ω–≥–æ–≤!"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ alert
    await callback.message.answer(ranks_text, parse_mode="Markdown")
    await callback.answer()
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
dp.include_router(router)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —à—Ç—Ä–∞—Ñ–æ–≤
async def check_penalties():
    while True:
        try:
            current_time = datetime.now()
            for user_id, user_stats in db.users.items():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–µ–Ω—å —Å–º–µ–Ω–∏–ª—Å—è
                if is_new_day(user_stats.last_reset):
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–∞–¥–∞—á–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user_stats.daily_tasks = user_stats.get_default_tasks()
                    user_stats.last_reset = current_time
                    user_stats.penalty_applied = False
                    # –ú–æ–∂–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

                    db.update_user(user_stats)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —à—Ç—Ä–∞—Ñ—ã, –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
                if should_apply_penalty(user_stats.last_reset) and not user_stats.penalty_applied:
                    penalty_xp = 0
                    for task in user_stats.daily_tasks:
                        if not task.completed:
                            penalty_xp += 10
                    user_stats.xp = max(0, user_stats.xp - penalty_xp)
                    user_stats.penalty_applied = True
                    db.update_user(user_stats)

                    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
                    try:
                        await bot.send_message(
                            user_id,
                            f"‚ö†Ô∏è –®—Ç—Ä–∞—Ñ –ø—Ä–∏–º–µ–Ω–µ–Ω! -{penalty_xp}XP –∑–∞ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏.\n"
                            f"‚è∞ –£ –≤–∞—Å –±—ã–ª–æ –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á.\n"
                            f"üéØ –°–µ–≥–æ–¥–Ω—è –Ω–æ–≤—ã–π –¥–µ–Ω—å - –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏!",
                            parse_mode="Markdown"
                        )
                    except Exception as e:
                        logger.error(f"Failed to send penalty notification to {user_id}: {e}")

            await asyncio.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å

        except Exception as e:
            logger.error(f"Error in penalty check: {e}")
            await asyncio.sleep(3600)


async def on_startup(app):
    await bot.set_webhook(WEBHOOK_URL)
    app["penalty_task"] = asyncio.create_task(check_penalties())  # ‚úÖ –ó–ê–ü–£–°–ö–ê–ï–ú —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É

async def on_shutdown(app):
    await bot.delete_webhook()
    await app["penalty_task"]  # ‚úÖ –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á—É
    await bot.session.close()
async def main():
    app = web.Application()
    app["bot"] = bot
    # Webhook handler
    SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path=WEBHOOK_PATH)
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)
    # aiohttp —Å–∞–º –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä
    await web._run_app(app, host="0.0.0.0", port=3000)
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
